//! Provides the CLI option parser
//!
//! Used to parse the argv/config file into a struct that
//! the server can consume and use as configuration data.

use clap::{Arg, App, ArgMatches};


const VERSION: Option<&'static str> = option_env!("CARGO_PKG_VERSION");

pub fn parse_args<'a>() -> ArgMatches<'a> {
    App::new("cernan")
        .version(VERSION.unwrap_or("unknown"))
        .author("Brian L. Troutwine <blt@postmates.com>")
        .about("telemetry aggregation and shipping, last up the ladder")
        .arg(Arg::with_name("port")
             .short("p")
             .long("port")
             .value_name("PORT")
             .help("The UDP port to bind to.")
             .takes_value(true)
             .default_value("8125"))
        .arg(Arg::with_name("flush-interval")
             .long("flush-interval")
             .value_name("FLSHINT")
             .help("How frequently to flush metrics to the backends in seconds.")
             .takes_value(true)
             .default_value("10"))
        .arg(Arg::with_name("console")
             .long("console")
             .help("Enable the console backend."))
        .arg(Arg::with_name("wavefront")
             .long("wavefront")
             .help("Enable the wavefront backend."))
        .arg(Arg::with_name("librato")
             .long("librato")
             .help("Enable the librato backend."))
        .arg(Arg::with_name("wavefront-port")
             .long("wavefront-port")
             .help("The port wavefront proxy is running on")
             .requires("wavefront")
             .takes_value(true)
             .default_value("2878"))
        .arg(Arg::with_name("wavefront-host")
             .long("wavefront-host")
             .help("The host wavefront proxy is running on")
             .requires("wavefront")
             .takes_value(true)
             .default_value("127.0.0.1"))
        .arg(Arg::with_name("wavefront-skip-aggrs")
             .long("wavefront-skip-aggrs")
             .requires("wavefront")
             .help("Send aggregate metrics to wavefront")) // default false
        .arg(Arg::with_name("librato-username")
             .long("librato-username")
             .help("The librato username for authentication.")
             .requires("librato")
             .takes_value(true)
             .default_value("statsd"))
        .arg(Arg::with_name("librato-host")
             .long("librato-host")
             .help("The librato host to report to.")
             .requires("librato")
             .takes_value(true)
             .default_value("https://metrics-api.librato.com/v1/metrics"))
        .arg(Arg::with_name("librato-token")
             .long("librato-token")
             .help("The librato token for authentication.")
             .requires("librato")
             .takes_value(true)
             .default_value("statsd"))
        .arg(Arg::with_name("tags")
             .long("tags")
             .help("A comma separated list of tags to report to supporting backends.")
             .takes_value(true)
             .use_delimiter(false)
             .default_value("source=cernan"))
        .get_matches()
}
